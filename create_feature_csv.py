from enum import *
import os
import json
import argparse
from collections import Counter


__author__ = 'Naqqash Aman'

RESULT_WITH_API_COUNT = 'output_with_api_count.csv'
RESULT_WITH_API_BOOL = 'output_with_api_boolean.csv'


def get_dict():
    _temp = dict()
    for col in TEMPLATE:
        _temp[col] = '0'

    return _temp


def match_sig(base, name):
    _result_dict = get_dict()
    _match = re.search(r'([^_]+)_(\w+)\.json', name)
    if _match:
        _result_dict['md5sum'] = _match.group(1)
        _result_dict['family'] = _match.group(2).lower()
    else:
        print "error: ", name
        return
    with open(os.path.join(base, name), 'r') as _file:
        content = _file.read()

    _match = re.findall(r'"api": "([^"]+)"', content)
    if _match:
        _result_dict['apis'] = dict(Counter(_match))
    else:
        _result_dict['apis'] = dict()

    if _result_dict['family'] in SIGNATURES.keys():
        for num, sig in SIGNATURES[_result_dict['family']].iteritems():
            is_trigger = True
            if 'static' in sig.keys():
                for st in sig['static']:
                    _match = re.search(st, content)
                    if not _match:
                        is_trigger = False
                        break
            elif 'api' in sig.keys():
                is_trigger = False
                json_content = json.loads(content)
                try:
                    processes = json_content['behavior']['processes']
                except:
                    processes = list()

                for process in processes:
                    if is_trigger:
                        break
                    for call in process['calls']:
                        _match = re.search(sig['api'], call['api'])
                        if not _match:
                            continue
                        if 'arguments' in sig.keys():
                            if 'arguments' not in call.keys():
                                continue
                            arg_key = sig['arguments'].keys()[0]
                            if arg_key not in call['arguments'].keys():
                                continue
                            _match = re.search(sig['arguments'][arg_key], call['arguments'][arg_key])
                            if _match:
                                is_trigger = True
                                break
                        else:
                            is_trigger = True
                            break
            else:
                is_trigger = False
                json_content = json.loads(content)
                try:
                    processes = json_content['behavior']['processes']
                except:
                    processes = list()

                for process in processes:
                    if is_trigger:
                        break
                    for call in process['calls']:
                        if 'arguments' in sig.keys():
                            if 'arguments' not in call.keys():
                                continue
                            arg_key = sig['arguments'].keys()[0]
                            if arg_key not in call['arguments'].keys():
                                continue
                            _match = re.search(sig['arguments'][arg_key], call['arguments'][arg_key])
                            if _match:
                                is_trigger = True
                                break
                        else:
                            is_trigger = True
                            break

            if is_trigger:
                _result_dict['sig{s_no}_fam{f_no}'.format(s_no=str(num), f_no=FAMILIES[_result_dict['family']])] = '1'

    return _result_dict


if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--path', action='store', dest='path', required=True,
                        help='Path to json files')

    data = vars(parser.parse_args())
    repo_path = data['path']

    all_apis = set()
    results = list()

    for root, dirs, files in os.walk(repo_path):
        tc = os.path.basename(root)
        for file_name in files:
            if file_name.endswith('.json'):
                res = match_sig(root, file_name)
                results.append(res)
                all_apis = all_apis.union(res['apis'].keys())

    all_apis = sorted(all_apis)
    with open(RESULT_WITH_API_COUNT, 'w+') as count_file, open(RESULT_WITH_API_BOOL, 'w+') as bool_file:
        _header = list()
        _header.append('family')
        _header.append('md5sum')
        _header += list(all_apis)
        _header.append('sig1_fam1')
        _header.append('sig2_fam1')
        _header.append('sig1_fam2')
        _header.append('sig2_fam2')
        _header.append('sig3_fam2')
        _header.append('sig1_fam6')
        _header.append('sig2_fam6')
        _header.append('sig1_fam7')
        _header.append('sig2_fam7')
        _header.append('sig1_fam8')
        _header.append('sig2_fam8')
        _header.append('sig3_fam8')

        count_file.write(','.join(_header) + '\n')
        bool_file.write(','.join(_header) + '\n')

        for result in results:
            out_row = list()
            out_row1 = list()
            out_row.append(result['family'])
            out_row.append(result['md5sum'])
            out_row1.append(result['family'])
            out_row1.append(result['md5sum'])

            for api in all_apis:
                if api in result['apis'].keys():
                    out_row.append(str(result['apis'][api]))
                    out_row1.append('1')
                else:
                    out_row.append('0')
                    out_row1.append('0')
            out_row.append(result['sig1_fam1'])
            out_row.append(result['sig2_fam1'])
            out_row.append(result['sig1_fam2'])
            out_row.append(result['sig2_fam2'])
            out_row.append(result['sig3_fam2'])
            out_row.append(result['sig1_fam6'])
            out_row.append(result['sig2_fam6'])
            out_row.append(result['sig1_fam7'])
            out_row.append(result['sig2_fam7'])
            out_row.append(result['sig1_fam8'])
            out_row.append(result['sig2_fam8'])
            out_row.append(result['sig3_fam8'])

            out_row1.append(result['sig1_fam1'])
            out_row1.append(result['sig2_fam1'])
            out_row1.append(result['sig1_fam2'])
            out_row1.append(result['sig2_fam2'])
            out_row1.append(result['sig3_fam2'])
            out_row1.append(result['sig1_fam6'])
            out_row1.append(result['sig2_fam6'])
            out_row1.append(result['sig1_fam7'])
            out_row1.append(result['sig2_fam7'])
            out_row1.append(result['sig1_fam8'])
            out_row1.append(result['sig2_fam8'])
            out_row1.append(result['sig3_fam8'])

            count_file.write(','.join(out_row) + '\n')
            bool_file.write(','.join(out_row1) + '\n')

